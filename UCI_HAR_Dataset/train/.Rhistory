con <- url("http://www.jhsph.edu", "r")
x <- readLines(con)
> head(x)
head(x)
x
con <- url("http://www.google.co.in", "r")
x <- readLines(con)
x
con <- url("http://www.google.com", "r")
x <- readLines(con)
con <- url("http://www.yahoo.com", "r")
con <- url("http://www.ndtv.com", "r")
x <- readLines(con)
x
lapply(
)
lapply
defaults write org.R-project.R force.LANG en_US.UTF-8
x <- c(28, 27, 38, 28, 26, 27, 29, 29, 32, 30, 30, 28, 35)
median(x)
mode(x)
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
Mode(x)
makeCacheMatrix <- function(x = matrix()) {
setMat <- function() {
mati <<- x # Assign the matrix, obtaining new matrix
}
getMat <- function() {
return (mati) # only return matrix from cache
}
setInverseMat<-function() {
inverseMati <<-solve(x)
#inserseMati <- solve(InverseMati)
}
getInverseMat <- function() {
print ("Matrix from cache")
print (mati)
print ("Returning inverse from cache")
return (inverseMati) # only return inverse from cache
}
list(setMat=setMat, getMat=getMat, setInverseMat=setInverseMat, getInverseMat=getInverseMat)  # generate the list
}
yy <- makeCacheMatrix(matrix(1:4, nrow = 2, ncol = 2))
cacheSolve <- function(x, ...) {
if (!is.null(makeCacheMatrix()$getMat())) {
# Obtaing de matrix inverse from matrix cache using solve()
print ("Obtaining inverse matrix from cache")
inverseMat <- makeCacheMatrix()$getInverseMat()
return (inverseMat)
}
mat<-matrix(sample(1:(x*x)), nrow=x, ncol=x) # new random sqare matrix
makeCacheMatrix(mat)$setMat()  # setting new matrix
makeCacheMatrix(mat)$setInverseMat()  # setting new inverse matrix
}
cacheSolve(yy)
yy$getMat()
yy
yy$getMat()
yy <- makeCacheMatrix(matrix(1:4, nrow = 2, ncol = 2))
mat<-matrix(c(2,1,5,3), nrow=2, ncol=2)
makeCacheMatrix(mat)$setMat()
makeCacheMatrix()$getMat()
makeCacheMatrix(mat)$setInverseMat()
makeCacheMatrix <- function(x = matrix()) {
## @x: a square invertible matrix
## return: a list containing functions to
##              1. set the matrix
##              2. get the matrix
##              3. set the inverse
##              4. get the inverse
##         this list is used as the input to cacheSolve()
inv = NULL
set = function(y) {
# use `<<-` to assign a value to an object in an environment
# different from the current environment.
x <<- y
inv <<- NULL
}
get = function() x
setinv = function(inverse) inv <<- inverse
getinv = function() inv
list(set=set, get=get, setinv=setinv, getinv=getinv)
}
yy <- makeCacheMatrix(matrix(1:4, nrow = 2, ncol = 2))
yy$get()
cacheSolve <- function(x, ...) {
## @x: output of makeCacheMatrix()
## return: inverse of the original matrix input to makeCacheMatrix()
inv = x$getinv()
## check to see if inverse has already been calculated
if (!is.null(inv)){
## get it from the cache.
message("getting cached data")
return(inv)
}
## else, calculates the inverse
mat.data = x$get()
inv = solve(mat.data, ...)
## sets the value of the inverse in the cache via the setinv function.
x$setinv(inv)
return(inv)
}
cacheSolve(yy)
cacheSolve(yy)
yy <- makeCacheMatrix(matrix(5:8, nrow = 2, ncol = 2))
cacheSolve(yy)
cacheSolve(yy)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
#put to M local variable the inverse matrix
m <- x$getinverse()
# check if exist the invert matrix in cache
if(!is.null(m)) {
message("getting cached data")
#return the cashed matrix and exit from the function
return(m)
}
# put to local variable data the matrix and calculate the invert
data <- x$get()
m <- solve(data, ...)
#save to the cashdata the invert matrix
x$setinverse(m)
#Return the invert matrix
m
}
yy <- makeCacheMatrix(matrix(5:8, nrow = 2, ncol = 2))
yy$get()
cacheSolve(yy)
cacheSolve(yy)
yy <- makeCacheMatrix(matrix(9:12, nrow = 2, ncol = 2))
cacheSolve(yy)
cacheSolve(yy)
makeCacheMatrix <- function(x = matrix()){
m <- NULL
set <- function(y){
x <<- y
m <<- NULL #store matrix in cache
}
get <- function() x #get matrix
setInverse <- function(solve) m<<-solve #set inverse matrix
getInverse <- function() m #get inverse matrix
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)  ## create list of functions
}
cacheSolve <- function(x, ...) {
m <- x$getInverse()                   #query the x matrix's cache
if(!is.null(m)){                    #if there is a cache the inverse has been previously calculated
message("getting cached data")
return(m)                         # return the cache
}
data <- x$get()                     # get the matrix used by makeCacheMatrix function
m <- solve(data, ...)               # calculate the inverse of the matrix
x$setInverse(m)                     # store the inverse matrix in cache using the makeCacheMatrix set function
}
yy <- makeCacheMatrix(matrix(9:12, nrow = 2, ncol = 2))
cacheSolve(yy)
cacheSolve(yy)
cacheSolve(yy)
yy <- makeCacheMatrix(matrix(90:94, nrow = 2, ncol = 2))
cacheSolve(yy)
yy <- makeCacheMatrix(matrix(90:93, nrow = 2, ncol = 2))
cacheSolve(yy)
cacheSolve(yy)
setwd("/Users/abhishekdubey/abhishek-git-repos/datasciencecoursera/UCI_HAR_Dataset/train")
x_train <- read.table(file="X_train.txt", sep = "\t", na.strings = "NA")
head(x_train)
class(x_train)
dim(x_train)
x_train <- read.table(file="X_train.txt", sep = " ", na.strings = "NA")
x_train <- read.table(file="X_train.txt", sep = "", na.strings = "NA")
dim(x_train)
x_train[1, 5]
x_train[1, 1:10]
x_train[1, ]
dim(x_train)
dim(x_train)
x_train[1, 15]
str(x_train)
summary(x_train)
summary(x_train[1:10, ])
summary(x_train[1:10, 1:5])
dim(x_train)
